name: Development Release
on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - dev
jobs:
  create-development-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly set permissions for tag/release creation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Use built-in token 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.3'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Create Development Release
        id: create_release
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine release type based on trigger or commit message
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Check commit message for version indicator
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            
            if [[ "$COMMIT_MESSAGE" == *"[major]"* ]]; then
              RELEASE_TYPE="major"
            elif [[ "$COMMIT_MESSAGE" == *"[minor]"* ]]; then
              RELEASE_TYPE="minor"
            elif [[ "$COMMIT_MESSAGE" == *"[patch]"* ]]; then
              RELEASE_TYPE="patch"
            else
              # Default to dev for normal pushes to develop
              RELEASE_TYPE="dev"
            fi
          fi
          
          echo "Release type: $RELEASE_TYPE"
          
          # Parse the version components
          # Check if this is already a dev version
          if [[ "$CURRENT_VERSION" == *"-dev."* ]]; then
            # This is already a dev version, just get the base version
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-dev\.[0-9]*$//')
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            MINOR=$(echo $BASE_VERSION | cut -d. -f2)
            PATCH=$(echo $BASE_VERSION | cut -d. -f3)
          else
            # Normal version
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          fi
          
          # Increment version based on release type
          if [ "$RELEASE_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$RELEASE_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          elif [ "$RELEASE_TYPE" == "patch" ]; then
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          else
            # For development builds, add dev suffix with formatted date and time
            FORMATTED_DATE=$(date '+%Y-%m-%d %H:%M')  # Human-readable date and time format
            NEW_VERSION="$MAJOR.$MINOR.$PATCH-dev.$FORMATTED_DATE"
          fi
          
          echo "New version: $NEW_VERSION"
          
          # Update version in package.json using direct sed command
          # This is more reliable than npm version in some environments
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          
          # Generate changelog entry
          mkdir -p .changelog
          CHANGELOG_FILE=".changelog/dev-release-$NEW_VERSION.md"
          
          echo "## Development Release $NEW_VERSION ($(date '+%Y-%m-%d'))" > $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          
          # Get commits since last tag or last 10 commits if no tag exists
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, including last 10 commits" >> $CHANGELOG_FILE
            git log HEAD~10..HEAD --pretty=format:"* %s (%h)" | grep -v "Merge" >> $CHANGELOG_FILE
          else
            echo "Changes since $LAST_TAG:" >> $CHANGELOG_FILE
            git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)" | grep -v "Merge" >> $CHANGELOG_FILE
          fi
          
          # Create tag name with safe format
          if [ "$RELEASE_TYPE" == "dev" ]; then
            # Use simplified tag format with timestamp for tag (needs to be URL-safe)
            TIMESTAMP=$(date +%Y%m%d%H%M)
            TAG_NAME="dev-$MAJOR-$MINOR-$PATCH-dev-$TIMESTAMP"
          else
            TAG_NAME="v$NEW_VERSION"
          fi
          
          echo "Tag name: $TAG_NAME"
          
          # Set outputs for use in later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
      
      # Commit changes in a separate step
      - name: Commit version changes
        run: |
          git add package.json .changelog/
          git commit -m "chore(release): ${{ steps.create_release.outputs.release_type }} version ${{ steps.create_release.outputs.new_version }}"
      
      # Create tag in a separate step
      - name: Create tag
        run: |
          git tag -a "${{ steps.create_release.outputs.tag_name }}" -m "Development Release ${{ steps.create_release.outputs.new_version }}"
      
      # Push changes in a separate step with proper error handling
      - name: Push changes
        run: |
          # First try to push the branch
          echo "Pushing changes to develop branch..."
          if ! git push origin develop; then
            echo "Failed to push to develop branch. This could be due to permissions or branch protection."
            exit 1
          fi
          
          # Then try to push the tag
          echo "Pushing tag..."
          if ! git push origin "${{ steps.create_release.outputs.tag_name }}"; then
            echo "Failed to push tag. This could be due to tag naming issues or permissions."
            exit 1
          fi
      
      # Create GitHub Release only if the previous steps succeeded
      - name: Create GitHub Release
        id: create_github_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_release.outputs.tag_name }}
          name: Development Release ${{ steps.create_release.outputs.new_version }}
          body_path: ${{ steps.create_release.outputs.changelog_file }}
          draft: false
          prerelease: true
      
      # Trigger the package publishing workflow
      - name: Trigger Package Publishing
        if: steps.create_release.outputs.release_type != 'dev'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-package-publish
          client-payload: '{"release_tag": "${{ steps.create_release.outputs.tag_name }}", "version": "${{ steps.create_release.outputs.new_version }}"}'
